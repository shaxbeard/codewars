// 424. Longest Repeating Character Replacement
// You are given a string s and an integer k. You can choose any character of the string 
// and change it to any other uppercase English character. You can perform this operation at most k times.

// Return the length of the longest substring containing the same letter you can get 
// after performing the above operations.

 
// Example 1:
// Input: s = "ABAB", k = 2
// Output: 4
// Explanation: Replace the two 'A's with two 'B's or vice versa.

// Example 2:
// Input: s = "AABABBA", k = 1
// Output: 4
// Explanation: Replace the one 'A' in the middle with 'B' and form "AABBBBA".
// The substring "BBBB" has the longest repeating letters, which is 4.


// DEMO 
// max = 5
// {"A":2, "B":3}, len = 5   # Count for current window
// "ABABBA", k - 2
//   l
//        r
// Is windowLen - maxVal in Count <= k ?
// 1 - 1 >  2? False
// 2 - 1 > 2? False
// 3 - 2 > 2 False
// 4 - 2 > 2? False
// 5 - 3 > 2? False
// 6 - 3 > 2? True


function characterReplacement(s, k) {
    let count = {}; // Hash table to track the count of each letter
    let max = 0; // The max length of any valid substring

    let l = 0;
    let maxf = 0;
    for (let r = 0; r < s.length; r++) { // right pointer will be generated by for loop
        // Section #1 - track the frequency of each character using pointer r
        let char = s[r]
        !count[char] ? count[char] = 1 : count[char]++ // increment the count of the char at index r
        maxf = Math.max(maxf, count[char])

        // Section #2 - check if each "window" is valid
        // (r - 1 + 1) is how we calculate the window length
        // while ((r - l + 1) - Math.max(...Object.values(count)) > k) { // check the max VALUE in hash table
        while ((r - l + 1) - maxf > k) { // check the max VALUE in hash table
            // If window is INVALID
            count[s[l]] -= 1; // decrement the count of char at left pointer
            l += 1; // AND increment the index of the left pointer
        }
        max = Math.max(max, r - l + 1); // check window size and update max
    }
    return max;
}

console.log(characterReplacement("ABAB", 2), 4)
console.log(characterReplacement("AABABBA", 1), 4)